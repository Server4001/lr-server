#!/usr/bin/env node

'use strict';

const path = require('path');
const Gaze = require('gaze').Gaze;
const livereload = require('tiny-lr');

const gazeOptions = {
    debounceDelay: 500,
    interval: 100,
    cwd: process.cwd()
};

const lrOptions = {
    port: 35729
};

const patterns = [
    // 'src/**/*.js'
    'src/**/*'
];

const eventCwd = process.cwd();
const host = '*' + ':' + lrOptions.port;

/**
 * @var {Object} server
 */
let server = livereload(lrOptions);

server.server.removeAllListeners('error');

server.server.on('error', function(err) {
    if (err.code === 'EADDRINUSE') {
        console.error('Port ' + lrOptions.port + ' is already in use by another process.');
    } else {
        console.error(err);
    }
    process.exit(1);
});

server.listen(lrOptions.port, undefined, function(err) {
    if (err) {
        return console.error(err);
    }
    console.log('Live reload server started on ' + host);

    new Gaze(patterns, gazeOptions, function(err) {
        if (err) {
            if (typeof err === 'string') {
                err = new Error(err);
            }

            throw err;
        }

        console.log('Watching files...');

        // On changed/added/deleted
        this.on('all', function(status, filePath) {
            filePath = path.relative(eventCwd, filePath);

            if (filePath === '') {
                return;
            }

            server.changed({ body: { files: [ filePath ] } });
        });

        this.on('error', function(err) {
            if (typeof err === 'string') {
                console.log("it is a string", err);
                err = new Error(err);
            }

            throw err;
        });
    });
});
